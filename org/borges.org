#+TITLE:   Borges Scheduler
#+startup: showeverything
#+options: todo:t

** Source
*** DONE License

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
 /**
  *	(The MIT License)
  *
  *  Copyright (c) 2015 Waldemar Quevedo. All rights reserved.
  * 
  * Permission is hereby granted, free of charge, to any person
  *  obtaining a copy of this software and associated documentation
  *  files (the "Software"), to deal in the Software without
  *  restriction, including without limitation the rights to use, copy,
  *  modify, merge, publish, distribute, sublicense, and/or sell copies
  *  of the Software, and to permit persons to whom the Software is
  *  furnished to do so, subject to the following conditions:
  * 
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  * 
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */

#+END_SRC

*** DONE Imports

- Use the Mesos Go bindings
- Import the /experimental/ Org mode parser for Go
- Library for handling Protocol Buffers types
- Networking packages for the http server
- Logging libraries
- =fmt= to print the responses from the http server

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
package main

import (
	"fmt"
	"flag"
	// "strconv"
	"time"
	"net"
	"net/http"
	"io/ioutil"

	"github.com/satori/go.uuid"
	"github.com/gogo/protobuf/proto"
	log   "github.com/golang/glog"
	mesos "github.com/mesos/mesos-go/mesosproto"
	// util  "github.com/mesos/mesos-go/mesosutil"
	sched "github.com/mesos/mesos-go/scheduler"
	org   "github.com/wallyqs/org-go"
)

#+END_SRC

*** DONE Definitions

Set version:
# Note: an idea would be to set the version number with a macro instead

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
const   BORGES_VERSION = "0.0.1"
#+END_SRC

Default minimum resources for a block:

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

const (
        MIN_CPUS_PER_TASK  = 1
        MIN_MEM_PER_TASK   = 56
)

#+END_SRC

Flags are used to control the level of logging
as well as setting the configuration file,
(which also has to be written in Org mode..)

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

var (
	setupfile = flag.String("f", "", "Setup file for Borges in Org mode")
)

func init() {
	flag.Parse()
}

#+END_SRC

*** TODO Types

**** ~BorgesScheduler~ type

Type which implements the ~mesos.Scheduler~ interface.
It also contains a dictionary of the current tasks,
as well as a queue of the tasks that should be dispatched.

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

type BorgesScheduler struct {
	Scheduler  *BorgesScheduler
        CodeBlocks map[*mesos.TaskID]*mesos.TaskInfo
	CodeBlocksQueue []*org.OrgSrcBlock
}

#+END_SRC

#+BEGIN_QUOTE
Note: Still not sure whether to handle /blocks/ as Jobs or Tasks instead...
Since we are in the domain of running Org Babel code blocks I decided to call
them that way for now.
#+END_QUOTE

***** COMMENT TODO [0/2] 

- [ ] Queue should be a priority queue
- [ ] It should be handlding ~CodeBlocks~, not mesos directly mesos tasks.
  The code blocks will compose a mesos task, but we still need of that 
  metadata to be able to handle what to do with the code blocks later on.

***** Scheduler							  :interface:

Methods required to implement the =Scheduler= interface from Mesos.

****** ResourceOffers

******* Scaffold

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func (sched *BorgesScheduler) ResourceOffers(driver sched.SchedulerDriver, offers []*mesos.Offer) {}

#+END_SRC

******* COMMENT TODO

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) ResourceOffers(driver sched.SchedulerDriver, offers []*mesos.Offer) {

        // We will get many resource offerings,
	// but sometimes the resources being offered will not be enough
	// so we will need to implement backing off in case that happens.
	for _, offer := range offers {

		cpuResources := util.FilterResources(offer.Resources, func(res *mesos.Resource) bool {
			return res.GetName() == "cpus"
		})
		cpus := 0.0
		for _, res := range cpuResources {
			cpus += res.GetScalar().GetValue()
		}

		memResources := util.FilterResources(offer.Resources, func(res *mesos.Resource) bool {
			return res.GetName() == "mem"
		})
		mems := 0.0
		for _, res := range memResources {
			mems += res.GetScalar().GetValue()
		}

		log.Infoln("[OFFER ] offerId =", offer.Id.GetValue(), ", cpus =", cpus, ", mem =", mems)
		if cpus < MIN_CPUS_PER_TASK {
			log.Infoln("[OFFER ] Not enough cpu!")
			continue;
		}

		if mems < MIN_MEM_PER_TASK {
			log.Infoln("[OFFER ] Not enough mem!")
			continue;
		}

		var tasks []*mesos.TaskInfo

		for _, src := range sched.blocks {
			sched.tasksLaunched++

			taskId := &mesos.TaskID{
				Value: proto.String(strconv.Itoa(sched.tasksLaunched)),
			}

			// Should build the command properly depending of the runtime
			// Currenty only bash supported, but good enough
			// since I can just call the runtime from there
			cmd := src.RawContent

			log.Infoln("[OFFER ] Executing this code block:", src.Name, src.Headers)

			// The code block specifies the resources it should allocate
			//
			taskCpus := MIN_CPUS_PER_TASK
			if src.Headers[":cpus"] != "" {
			  taskCpus, _ = strconv.Atoi(src.Headers[":cpus"])
			}

			taskMem := MIN_MEM_PER_TASK
			if src.Headers[":mem"] != "" {
			  taskMem, _ = strconv.Atoi(src.Headers[":mem"])
			}

			task := &mesos.TaskInfo{
				Name:     proto.String("ob-mesos-" + taskId.GetValue()),
				TaskId:   taskId,
				SlaveId:  offer.SlaveId,
				// Executor: sched.executor,
				Resources: []*mesos.Resource{
					util.NewScalarResource("cpus", float64(taskCpus)),
					util.NewScalarResource("mem", float64(taskMem)),
				},
			        Command: &mesos.CommandInfo{
				 	Value: proto.String(cmd),
				},
			}

                        if len(src.Headers[":dockerimage"]) > 0 {
                                task.Container = &mesos.ContainerInfo{
                                        Type: mesos.ContainerInfo_DOCKER.Enum(),
                                        Docker: &mesos.ContainerInfo_DockerInfo{
                                                Image: proto.String(src.Headers[":dockerimage"]),
						// TODO:
                                                // Network: mesos.ContainerInfo_DockerInfo_BRIDGE.Enum(),
                                                // PortMappings: []*ContainerInfo_DockerInfo_PortMapping{},
                                        },
                                }
                        }

			fmt.Printf("[OFFER ] Prepared to launch task:%s with offer %s \n", task.GetName(), offer.Id.GetValue())

			tasks = append(tasks, task)
		}
		log.Infoln("[OFFER ] Launching ", len(tasks), "tasks for offer", offer.Id.GetValue())
		driver.LaunchTasks([]*mesos.OfferID{offer.Id}, tasks, &mesos.Filters{RefuseSeconds: proto.Float64(1)})
	}
}

#+END_SRC

****** StatusUpdate

******* Scaffold

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func (sched *BorgesScheduler) StatusUpdate(driver sched.SchedulerDriver, status *mesos.TaskStatus) {}

#+END_SRC

******* COMMENT TODO

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) StatusUpdate(driver sched.SchedulerDriver, status *mesos.TaskStatus) {
	log.Infoln("[STATUS] task", status.TaskId.GetValue(), " is in state ", status.State.Enum().String())
	if status.GetState() == mesos.TaskState_TASK_FINISHED {
		sched.tasksFinished++
	}

	if sched.tasksFinished >= len(sched.blocks) {
		log.Infoln("[STATUS] All code blocks have been ran. Done.")
		driver.Stop(false)
	}

	if status.GetState() == mesos.TaskState_TASK_LOST ||
		status.GetState() == mesos.TaskState_TASK_KILLED ||
		status.GetState() == mesos.TaskState_TASK_FAILED {
		log.Infoln(
			"[STATUS] Aborting because task", status.TaskId.GetValue(),
			"is in unexpected state", status.State.String(),
			"with message", status.GetMessage(),
		)
		log.Infoln("[STATUS] Stopping all tasks.")
		driver.Abort()
	}
}

#+END_SRC

****** TODO Registered

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) Registered(driver sched.SchedulerDriver, frameworkId *mesos.FrameworkID, masterInfo *mesos.MasterInfo) {}
#+END_SRC

****** TODO Reregistered

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) Reregistered(driver sched.SchedulerDriver, masterInfo *mesos.MasterInfo) {}
#+END_SRC

****** TODO Disconnected

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) Disconnected(sched.SchedulerDriver) {}
#+END_SRC

****** TODO OfferRescinded

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) OfferRescinded(sched.SchedulerDriver, *mesos.OfferID) {}

#+END_SRC

****** TODO FrameworkMessage

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) FrameworkMessage(sched.SchedulerDriver, *mesos.ExecutorID, *mesos.SlaveID, string) {}
#+END_SRC

****** TODO SlaveLost

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) SlaveLost(sched.SchedulerDriver, *mesos.SlaveID) {}
#+END_SRC

****** TODO ExecutorLost

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) ExecutorLost(sched.SchedulerDriver, *mesos.ExecutorID, *mesos.SlaveID, int) {}
#+END_SRC

****** TODO Error

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go
func (sched *BorgesScheduler) Error(driver sched.SchedulerDriver, err string) {}
#+END_SRC

***** NewCodeBlockTask						    :factory:

#+BEGIN_SRC go :results output :tangle src/github.com/wallyqs/borges/borges.go

// Takes a blockname and returns a Mesos task with an uuid
//
func NewCodeBlockTask(blockname string) *mesos.TaskInfo {
        tuuid := uuid.NewV4()
	task := &mesos.TaskInfo{
		Name:    proto.String(blockname + "/" + tuuid.String()),
	        TaskId:  &mesos.TaskID{
			Value: proto.String(tuuid.String()),
		},
	}

	return task
}
#+END_SRC

**** ~BorgesAPIServer~ type

Handles requests and dispatches Mesos tasks to run the code blocks.

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

type BorgesAPIServer struct {
  Scheduler *BorgesScheduler
  Server    *http.Server
  Bind      string
  Listener  net.Listener
}

#+END_SRC

***** TODO Resources

****** TODO Org handler

A client will send a request to =POST /org= with the Org mode document
as part of its payload, and then the scheduler will take the code blocs
and run them on top of Mesos.

- [X] Read and parse the body
- [ ] Create the mesos tasks in case we have detected some
- [ ] Put then in the scheduler queue for execution
   # Note: It should be a priority queue since we will re-execute the task in case it fails asap in some cases.
- [ ] As soon as there is a resource offering, they will be dispatched by the scheduler.

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func (s *BorgesAPIServer) OrgHandler(w http.ResponseWriter, r *http.Request) {
        log.Infoln("POST /org")

	switch r.Method {
	case "POST":
		defer r.Body.Close()
		contents, err := ioutil.ReadAll(r.Body)
		if err != nil {
			log.Fatal("Can't listen to the monitor port: %v", err)
		}
		orgtext := string(contents)

		blocks := getBlocksFromString(orgtext)
		for _, block := range blocks {
		  s.Scheduler.CodeBlocksQueue = append(s.Scheduler.CodeBlocksQueue, block)
		}
		fmt.Fprintf(w, "Scheduled %v code blocks for execution", len(blocks))
	
	default:
		w.WriteHeader(http.StatusNotFound)
		fmt.Fprintf(w, "Not found: %v /org/", r.Method)
	}

}

func getBlocksFromString (orgtext string) []*org.OrgSrcBlock {
  blocks := make([]*org.OrgSrcBlock, 0)

  // Ugh...
  root := org.Preprocess(orgtext)
  tokens := org.Tokenize(orgtext, root)

  for _, t := range tokens {
    switch o := t.(type) {
    case *org.OrgSrcBlock:
      blocks = append(blocks, o)
    }
  }

  return blocks
}

#+END_SRC

****** TODO Monitoring handlers

Add handlers to serve information about the scheduler, current version and health.

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func (s *BorgesAPIServer) RootHandler(w http.ResponseWriter, r *http.Request) {
  log.Infoln("GET /")
  fmt.Fprintf(w, "Borges Scheduler v%s", BORGES_VERSION)
}

func (s *BorgesAPIServer) HealthzHandler(w http.ResponseWriter, r *http.Request) {
  log.Infoln("GET /healthz")
  fmt.Fprintf(w, "OK\n")
}

func (s *BorgesAPIServer) VarzHandler(w http.ResponseWriter, r *http.Request) {
  log.Infoln("GET /varz")
  fmt.Fprintf(w, "TODO: GET /varz")
}

#+END_SRC
***** TODO Factory method

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func NewAPIServer(bind string) *BorgesAPIServer {

  l, err := net.Listen("tcp", bind)
  if err != nil {
    log.Fatal("Can't listen to the monitor port: %v", err)
  }

  api := &BorgesAPIServer{
                       Bind: bind, 
                       Listener: l,
            }

  mux := http.NewServeMux()
  mux.HandleFunc("/",         api.RootHandler)
  mux.HandleFunc("/org",      api.OrgHandler)
  mux.HandleFunc("/healthz",  api.HealthzHandler)
  mux.HandleFunc("/varz",     api.VarzHandler)

  api.Server = &http.Server{
		Addr:           bind,
		Handler:        mux,
		ReadTimeout:    2 * time.Second,
		WriteTimeout:   2 * time.Second,
		MaxHeaderBytes: 1 << 20,
  }

  return api
}

#+END_SRC
***** TODO Start method 						    

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func (s *BorgesAPIServer) Start() {
  log.Infoln("API server running at ", s.Bind)
  s.Server.Serve(s.Listener) 
}

#+END_SRC

*** DONE Util functions
**** parseIP

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

// Borrowed from the mesos-go example at:
// https://github.com/mesos/mesos-go/blob/master/examples/test_framework.go#L235
func parseIP(address string) net.IP {
	addr, err := net.LookupIP(address)
	if err != nil {
		log.Infoln(err)
	}
	if len(addr) < 1 {
		fmt.Printf("failed to parse IP from address '%v'", address)
	}
	return addr[0]
}

#+END_SRC

*** DONE Main

1. Read the configuration
2. Configure the scheduler driver for mesos
3. Start the Borges HTTP API server loop
4. Start the scheduler loop

#+BEGIN_SRC go :tangle src/github.com/wallyqs/borges/borges.go

func main() {

        // Parse Org mode file first and get the code blocks that will be run
	//
	log.Infoln("Reading #+setupfile: ", *setupfile)
	contents, err := ioutil.ReadFile(*setupfile)
	if err != nil {
		fmt.Printf("Problem reading the file: %v \n", err)
	}
	config := org.Preprocess(string(contents))

	// Create Scheduler and HTTP API server
	//
	borges := &BorgesScheduler{
	  CodeBlocks: make(map[*mesos.TaskID]*mesos.TaskInfo),
	  CodeBlocksQueue: make([]*org.OrgSrcBlock, 0),
	}
	server := NewAPIServer(config.Settings["BORGES_BIND"] + ":" + config.Settings["BORGES_PORT"])
	server.Scheduler = borges

	// Configure the Driver
	//
	bindingAddress := parseIP(config.Settings["BORGES_BIND"])
	driverConfig := sched.DriverConfig{
		Scheduler: borges,
		Framework: &mesos.FrameworkInfo{
		  User: proto.String(""), // covered by the mesos-go bindings
		  Name: proto.String("Borges v" + BORGES_VERSION),
		},
		Master: config.Settings["MESOS_MASTER"],
		BindingAddress: bindingAddress,
	}

	driver, err := sched.NewMesosSchedulerDriver(driverConfig)
	if err != nil {
		log.Infoln("Unable to create a SchedulerDriver ", err.Error())
	}

	// Start HTTP Server
	//
	go func() { server.Start() }()

	// Start Mesos Scheduler
	//
	if stat, err := driver.Run(); err != nil {
		fmt.Printf("Framework stopped with status %s and error: %s\n", stat.String(), err.Error())
	}

}

#+END_SRC

**** COMMENT TODO [0/1] 

- [ ] Also needed to be able to read the configurtion via an environment variable
  so that it can be configured via =/etc/default/=

** Run

#+name: main
#+BEGIN_SRC sh 
export GOPATH="`pwd`"
go fmt src/github.com/wallyqs/borges/borges.go
go run src/github.com/wallyqs/borges/borges.go -f /tmp/borges-config.org -logtostderr=true
sleep 5
#+END_SRC
